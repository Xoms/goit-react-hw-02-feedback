{"version":3,"sources":["components/Controls/Controls.styles.js","components/shared/Button/Button.styles.js","components/shared/Button/Button.jsx","components/shared/Button/index.js","components/Controls/Controls.jsx","components/Controls/index.js","components/shared/Title/Title.styles.js","components/shared/Title/Title.jsx","components/shared/Title/index.js","components/shared/Container/Container.styles.js","components/shared/Container/index.js","components/shared/Container/Container.jsx","components/Statistics/StatisticsItem/StatisticsItem.jsx","components/Statistics/StatisticsItem/index.js","components/Statistics/Statistics.styles.js","components/Statistics/Statistics.jsx","components/Statistics/index.js","App.jsx","reportWebVitals.js","index.js"],"names":["StyledControls","styled","div","Btn","button","Button","props","caption","handleClick","type","onClick","defaultProps","Controls","onLeaveFeedback","StyledTitle","h2","Title","title","className","StyledContainer","Container","children","StatisticsItem","val","percent","StyledStat","ul","Statistics","good","neutral","bad","total","positivePercentage","App","state","key","setState","newState","countPositivePercentage","Math","round","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6969d49e.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledControls = styled.div`\r\n    display: flex;\r\n    margin-bottom: 20px;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Btn = styled.button`\r\n    border-radius: 5px;\r\n    display: block;\r\n    padding: 5px 10px;\r\n    &:not(:last-child){\r\n        margin-right: 15px;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Btn } from './Button.styles';\r\n\r\nconst Button = (props) => {\r\n  const { caption, handleClick } = props\r\n  return (\r\n  <Btn type=\"button\"  onClick={handleClick}> \r\n    {caption}\r\n  </Btn>\r\n)};\r\n\r\nButton.propTypes = {\r\n  caption: PropTypes.string,\r\n  handleClick: PropTypes.func,\r\n};\r\n\r\nButton.defaultProps = {\r\n  caption: '',\r\n  handleClick: () => {}\r\n};\r\n\r\nexport default Button;\r\n","import Button from './Button';\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { StyledControls } from './Controls.styles';\r\nimport  Button  from '../shared/Button';\r\n\r\nconst Controls = ({onLeaveFeedback}) => (\r\n  <StyledControls>\r\n        <Button caption=\"Good\" handleClick = {()=> onLeaveFeedback('good')}></Button>\r\n        <Button caption=\"Neutral\" handleClick = {()=> onLeaveFeedback('neutral')}></Button>\r\n        <Button caption=\"Bad\" handleClick = {()=> onLeaveFeedback('bad')}></Button>\r\n  </StyledControls>\r\n);\r\n\r\nControls.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nControls.defaultProps = {\r\n  // bla: 'test',\r\n};\r\n\r\nexport default Controls;\r\n","import Controls from './Controls';\r\n\r\nexport default Controls;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledTitle = styled.h2`\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 20px;\r\n    margin-bottom: 30px;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { StyledTitle } from './Title.styles';\r\n\r\nconst Title = ({title}) => (\r\n  <StyledTitle className=\"title\">\r\n    {title}\r\n  </StyledTitle>\r\n);\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nTitle.defaultProps = {\r\n  // bla: 'test',\r\n};\r\n\r\nexport default Title;\r\n","import Title from './Title';\r\n\r\nexport default Title;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledContainer = styled.div`\r\n    width: 1200px;\r\n    margin: 0 auto;\r\n`;\r\n","import Container from './Container';\r\n\r\nexport default Container;\r\n","import React from 'react';\r\n\r\nimport { StyledContainer } from './Container.styles';\r\n\r\nconst Container = ({children}) => (\r\n  <StyledContainer>\r\n    {children}\r\n  </StyledContainer>\r\n);\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StatisticsItem = ({caption, val, percent}) => (\r\n  <li className=\"statistics__item\">\r\n      <span className=\"statistics__caption\">{caption}: {val} {percent && '%'}</span>\r\n  </li>\r\n);\r\n\r\nStatisticsItem.propTypes = {\r\n  caption: PropTypes.string.isRequired,\r\n  val: PropTypes.number.isRequired,\r\n  percent: PropTypes.bool\r\n};\r\n\r\nStatisticsItem.defaultProps = {\r\n  percent: false,\r\n};\r\n\r\nexport default StatisticsItem;\r\n","import StatisticsItem from './StatisticsItem';\r\n\r\nexport default StatisticsItem;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStat = styled.ul`\r\n   list-style: none;\r\n`;\r\n","import React from 'react';\r\nimport StatisticsItem from './StatisticsItem';\r\nimport PropTypes from 'prop-types';\r\nimport { StyledStat } from './Statistics.styles';\r\n\r\nconst Statistics = (props) => {\r\n  const {\r\n    good, \r\n    neutral, \r\n    bad, \r\n    total, \r\n    positivePercentage \r\n  } = props\r\n\r\n  return( \r\n      <StyledStat className=\"statistics\">\r\n        {total ? <>\r\n        <StatisticsItem caption=\"Good\" val={good}/>\r\n        <StatisticsItem caption=\"Neutral\" val={neutral}/>\r\n        <StatisticsItem caption=\"Bad\" val={bad}/>\r\n        <StatisticsItem caption=\"Total\" val={total}/>\r\n        <StatisticsItem caption=\"Positive percentage\" val={positivePercentage} percent/>\r\n        </> : <li>No feedback given</li>\r\n        }\r\n        \r\n      </StyledStat> \r\n  )\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good:  PropTypes.number, \r\n    neutral:  PropTypes.number, \r\n    bad:  PropTypes.number, \r\n    total:  PropTypes.number, \r\n    positivePercentage:  PropTypes.number \r\n};\r\n\r\nStatistics.defaultProps = {\r\n  // bla: 'test',\r\n};\r\n\r\nexport default Statistics;\r\n","import Statistics from './Statistics';\r\n\r\nexport default Statistics;\r\n","import React, {Component} from 'react';\r\nimport './App.scss';\r\nimport Controls from './components/Controls';\r\nimport Title from './components/shared/Title'\r\nimport Container from './components/shared/Container';\r\nimport Stistics from './components/Statistics';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n    total: 0,\r\n    positivePercentage: 0\r\n  }\r\n\r\n\r\n  onLeaveFeedback = (key) => {\r\n    this.setState((state) => {\r\n      let newState = {...state}\r\n      newState[key]++ \r\n      newState.total++\r\n      newState.positivePercentage = this.countPositivePercentage(newState)\r\n      return newState\r\n    })\r\n  }\r\n\r\n  countPositivePercentage({total, good}){\r\n    return Math.round((good/total)*100)\r\n  }\r\n  render(){\r\n    return (\r\n      <Container className=\"container feedback\">\r\n        <Title title=\"Please leave feedback\"/>\r\n        <Controls onLeaveFeedback={this.onLeaveFeedback}/>\r\n        <Title title=\"Statistics\" />\r\n        <Stistics {...this.state}/>\r\n      </Container>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}